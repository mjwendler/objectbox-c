// Code generated by ObjectBox; DO NOT EDIT.

#include "city.obx.hpp"

const obx::Property<City, OBXPropertyType_Long> City_::id(1);
const obx::Property<City, OBXPropertyType_String> City_::name(2);
const obx::Property<City, OBXPropertyType_FloatVector> City_::location(3);

void City::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const City& object) {
    fbb.Clear();
    auto offsetname = fbb.CreateString(object.name);
    auto offsetlocation = fbb.CreateVector(object.location);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddOffset(6, offsetname);
    fbb.AddOffset(8, offsetlocation);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

City City::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    City object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<City> City::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::make_unique<City>();
    fromFlatBuffer(data, size, *object);
    return object;
}

void City::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, City& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) {
            outObject.name.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.name.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<float>*>(8);
        if (ptr) { 
            outObject.location.assign(ptr->begin(), ptr->end());
        } else {
            outObject.location.clear();
        }
    }
}

